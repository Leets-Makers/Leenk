name: Java CI with Gradle

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]
    types: [ opened, synchronize, reopened ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # gradle caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*gradle*','**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Gradle Build (test는 제외)
      - name: Build with Gradle
        run: ./gradlew build -x test

      # 도커 허브에 로그인
      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER_NAME }}
          password: ${{ secrets.DOCKER_USER_TOKEN }}

      - name: Docker build & push
        run: |
          docker build -t ${{ secrets.DOCKER_USER_NAME }}/leenk-dev -f ./Dockerfile-dev .
          docker push ${{ secrets.DOCKER_USER_NAME }}/leenk-dev

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_EC2_USER }}
          key: ${{ secrets.DEV_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd /home/ubuntu/compose
            
            EXIST_BLUE=$(docker inspect -f '{{.State.Running}}' spring-blue 2>/dev/null)
            
            if [ "$EXIST_BLUE" != "true" ]; then
              docker-compose up -d spring-blue
              BEFORE_COLOR="green"
              AFTER_COLOR="blue"
              BEFORE_PORT=8081
              AFTER_PORT=8080
            else
              docker-compose up -d spring-green
              BEFORE_COLOR="blue"
              AFTER_COLOR="green"
              BEFORE_PORT=8080
              AFTER_PORT=8081
            fi
            
            echo "===== ${AFTER_COLOR} server upc(port:${AFTER_PORT}) ====="
            
            for cnt in {1..10}
            do
              echo "===== 서버 응답 확인중(${cnt}/10) =====";
              UP=$(curl -s http://localhost:${AFTER_PORT}/health-check)
              if [ "$UP" != "OK" ]; then
                  sleep 10
                  continue
                else
                  break
              fi
            done
            
            if [ $cnt -eq 10 ]; then
              echo "===== 서버 실행 실패 ====="
              exit 1
            fi
            
            echo "===== Caddy 설정 변경 ====="
            sudo sed -i "s/${BEFORE_PORT}/${AFTER_PORT}/g" /etc/caddy/Caddyfile
            
            sudo caddy reload --config /etc/caddy/Caddyfile --adapter caddyfile
  
            echo "$BEFORE_COLOR server down(port:${BEFORE_PORT})"
            docker-compose stop spring-${BEFORE_COLOR}
            docker-compose rm -f spring-${BEFORE_COLOR}

          debug: true
